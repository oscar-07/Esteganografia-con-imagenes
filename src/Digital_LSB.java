
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.TextAlignment;
import org.apache.poi.xwpf.usermodel.UnderlinePatterns;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author oscar
 */
public class Digital_LSB extends javax.swing.JFrame {

    private String DireccionA=null;
    private String DireccionB=null;
    private int valida=0;
    private int validab=0;
    private int guardab=0;

    public Digital_LSB() {
        initComponents();
        this.setResizable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EimagenA = new javax.swing.JLabel();
        BcargarimagenA = new javax.swing.JButton();
        BcargararchivoA = new javax.swing.JButton();
        EarchivoA = new javax.swing.JLabel();
        BcargarimagenB = new javax.swing.JButton();
        EimagenB = new javax.swing.JLabel();
        Eresultado = new javax.swing.JLabel();
        Bcifrar = new javax.swing.JButton();
        CajaImagenA = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CajatextoA = new javax.swing.JTextArea();
        CajaImagenB = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CajatextoB = new javax.swing.JTextArea();
        Bdescifrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        LSB = new javax.swing.JLabel();
        LimpiarA = new javax.swing.JButton();
        LimpiarB = new javax.swing.JButton();
        LimpiarC = new javax.swing.JButton();
        LimpiarD = new javax.swing.JButton();
        Bguardar = new javax.swing.JButton();
        Elisto = new javax.swing.JLabel();
        Elisto1 = new javax.swing.JLabel();
        Esalidaarchivo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EimagenA.setText("Imagen Cargada.");

        BcargarimagenA.setText("Cargar");
        BcargarimagenA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcargarimagenAActionPerformed(evt);
            }
        });

        BcargararchivoA.setText("Cargar");
        BcargararchivoA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcargararchivoAActionPerformed(evt);
            }
        });

        EarchivoA.setText("Archivo Cargado.");

        BcargarimagenB.setText("Cargar");
        BcargarimagenB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcargarimagenBActionPerformed(evt);
            }
        });

        EimagenB.setText("Imagen Cargada.");

        Eresultado.setText("Resultado.");

        Bcifrar.setBackground(new java.awt.Color(153, 153, 153));
        Bcifrar.setText("Cifrar");
        Bcifrar.setEnabled(false);
        Bcifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcifrarActionPerformed(evt);
            }
        });

        CajaImagenA.setBackground(new java.awt.Color(0, 102, 102));
        CajaImagenA.setForeground(new java.awt.Color(0, 102, 102));
        CajaImagenA.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        CajatextoA.setColumns(20);
        CajatextoA.setRows(5);
        jScrollPane1.setViewportView(CajatextoA);

        CajaImagenB.setBackground(new java.awt.Color(0, 102, 102));
        CajaImagenB.setForeground(new java.awt.Color(0, 102, 102));
        CajaImagenB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        CajatextoB.setEditable(false);
        CajatextoB.setColumns(20);
        CajatextoB.setRows(5);
        jScrollPane2.setViewportView(CajatextoB);

        Bdescifrar.setBackground(new java.awt.Color(153, 153, 153));
        Bdescifrar.setText("Descifrar");
        Bdescifrar.setEnabled(false);
        Bdescifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BdescifrarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 1, 24)); // NOI18N
        jLabel1.setText("HESTEGANOGRAF√çA.");

        LSB.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        LSB.setText("LSB");

        LimpiarA.setText("Limpiar");
        LimpiarA.setEnabled(false);
        LimpiarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarAActionPerformed(evt);
            }
        });

        LimpiarB.setText("Limpiar");
        LimpiarB.setEnabled(false);
        LimpiarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarBActionPerformed(evt);
            }
        });

        LimpiarC.setText("Limpiar");
        LimpiarC.setEnabled(false);
        LimpiarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarCActionPerformed(evt);
            }
        });

        LimpiarD.setText("Limpiar");
        LimpiarD.setEnabled(false);
        LimpiarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarDActionPerformed(evt);
            }
        });

        Bguardar.setText("Guardar");
        Bguardar.setEnabled(false);
        Bguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BguardarActionPerformed(evt);
            }
        });

        Elisto.setBackground(new java.awt.Color(102, 102, 255));
        Elisto.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        Elisto.setForeground(new java.awt.Color(51, 102, 0));
        Elisto.setToolTipText("");
        Elisto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Elisto1.setBackground(new java.awt.Color(153, 153, 255));
        Elisto1.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        Elisto1.setForeground(new java.awt.Color(51, 153, 0));
        Elisto1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BcargararchivoA, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LimpiarC, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addComponent(Bcifrar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Elisto, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EarchivoA, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Esalidaarchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Bdescifrar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(Elisto1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Bguardar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LimpiarD, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Eresultado, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CajaImagenA, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BcargarimagenA, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LimpiarA, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(EimagenA, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addComponent(LSB, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EimagenB, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(BcargarimagenB, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LimpiarB, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(CajaImagenB, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EimagenA, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EimagenB, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CajaImagenA, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CajaImagenB, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(LSB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BcargarimagenB, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(BcargarimagenA, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(LimpiarA, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(LimpiarB, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Elisto1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Elisto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Bcifrar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Bdescifrar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EarchivoA, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eresultado, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Esalidaarchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BcargararchivoA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LimpiarC, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LimpiarD, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bguardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BcargarimagenAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcargarimagenAActionPerformed
        String documento="";
        JFileChooser archivo = new JFileChooser();
        //archivo.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Solo archivos jpg","jpg");
        archivo.setFileFilter(filtro);
        
        int valida = archivo.showOpenDialog(this);
        if (valida == JFileChooser.APPROVE_OPTION) {
                this.DireccionA = archivo.getSelectedFile().toString();
                Image img= new ImageIcon(this.DireccionA).getImage();
                ImageIcon img2=new ImageIcon(img.getScaledInstance(279, 186, Image.SCALE_SMOOTH));
                CajaImagenA.setIcon(img2);
                this.valida++;
                if(this.valida==2){
                    Bcifrar.setEnabled(true);
                }
                LimpiarA.setEnabled(true);
        } 
    }//GEN-LAST:event_BcargarimagenAActionPerformed

    private void BcargararchivoAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcargararchivoAActionPerformed
        String documento="";
        JFileChooser archivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Solo archivos docx","docx");
        //FileNameExtensionFilter filtro = new FileNameExtensionFilter("Solo archivos txt","txt");
        archivo.setFileFilter(filtro);
        FileReader leer = null;
        BufferedReader buffer = null;
        int valida = archivo.showOpenDialog(this);
        if (valida == JFileChooser.APPROVE_OPTION) {
            String ruta = archivo.getSelectedFile().toString();  
            FileInputStream fis;
            
            try {
                fis = new FileInputStream(ruta);
                InputStream entradaArch = fis; 
                try { 
                    XWPFDocument ardocx = new XWPFDocument(entradaArch);
                    XWPFWordExtractor xwpf_we = new XWPFWordExtractor(ardocx); 
                    String texto = xwpf_we.getText(); 
                    CajatextoA.setText(texto);
                    
                } catch (IOException ex) {
                    Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.valida++;
            if(this.valida==2){
                Bcifrar.setEnabled(true);
            }
            LimpiarC.setEnabled(true);
        }    
            
            /*
            try {

                leer = new FileReader(ruta);
                int caract = leer.read();
                while(caract != -1) {
                    documento+=(char)caract; 
                    caract = leer.read();
                
            }
            
                CajatextoA.setText(documento);
            
        } 
      catch(Exception e){
         e.printStackTrace();
      }finally{
         // En el finally cerramos el fichero, para asegurarnos
         // que se cierra tanto si todo va bien como si salta 
         // una excepcion.
         try{                    
            if( null != leer ){   
               leer.close();     
            }                  
         }catch (Exception e2){ 
            e2.printStackTrace();
         }
      }
        
        }
        
        */
    }//GEN-LAST:event_BcargararchivoAActionPerformed

    private void BcifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcifrarActionPerformed
        try {
            InputStream entrada = new FileInputStream(this.DireccionA);
            ImageInputStream entradaimagen = ImageIO.createImageInputStream(entrada);
            BufferedImage archivo = ImageIO.read(entradaimagen);
  
            String tarea=CajatextoA.getText();
            tarea=textoBinario(tarea);

            char [] cajatarea=tarea.toCharArray();
            String salida=textoBinario(Character.toString((char)223));
            char [] cajasalida=salida.toCharArray();
            int out=0;
            
            int contadortama√±o=0;
            int venas=1;
            
            for (int i = 0; i <archivo.getHeight(); i++) {
                for (int j = 0; j < archivo.getWidth(); j++) {
                    int parametro = archivo.getRGB(j, i);
                    Color puntero = new Color(parametro);
                    if(contadortama√±o<cajatarea.length){
                        switch(venas){
                            case 1:
                                archivo.setRGB(j, i, new Color(Anexo((char)puntero.getRed(), cajatarea[contadortama√±o]), puntero.getGreen(), puntero.getBlue(), puntero.getAlpha()).getRGB());
                                venas++;
                                break;
                            case 2:

                                archivo.setRGB(j, i, new Color(puntero.getRed(), Anexo((char)puntero.getGreen(), cajatarea[contadortama√±o]), puntero.getBlue(), puntero.getAlpha()).getRGB());
                                venas++;
                                break;
                            default:
                                archivo.setRGB(j, i, new Color(puntero.getRed(),puntero.getGreen(), Anexo((char)puntero.getBlue(), cajatarea[contadortama√±o]), puntero.getAlpha()).getRGB());
                                venas=1;
                        }

                        contadortama√±o++;
                    }else{
                        if(out<salida.length()){
                            switch(venas){
                                case 1:
                                    archivo.setRGB(j, i, new Color(Anexo((char)puntero.getRed(), cajasalida[out]), puntero.getGreen(), puntero.getBlue(), puntero.getAlpha()).getRGB());
                                    venas++;
                                    break;
                                case 2:

                                    archivo.setRGB(j, i, new Color(puntero.getRed(), Anexo((char)puntero.getGreen(), cajasalida[out]), puntero.getBlue(), puntero.getAlpha()).getRGB());
                                    venas++;
                                    break;
                                default:
                                    archivo.setRGB(j, i, new Color(puntero.getRed(),puntero.getGreen(), Anexo((char)puntero.getBlue(), cajasalida[out]), puntero.getAlpha()).getRGB());
                                    venas=1;
                            }
                            out++;
                        }else{
                            archivo.setRGB(j, i, new Color(puntero.getRed(), puntero.getGreen(), puntero.getBlue(), puntero.getAlpha()).getRGB());
                        }
                        //archivo.setRGB(j, i, new Color(puntero.getRed(), puntero.getGreen(), puntero.getBlue(), puntero.getAlpha()).getRGB());
                    }  
                }
            }
            Calendar calendario = Calendar.getInstance();
            calendario = new GregorianCalendar();
            String Nombre="Cifrado hh"+calendario.get(Calendar.HOUR_OF_DAY)+".mm"+calendario.get(Calendar.MINUTE)+".ss"+calendario.get(Calendar.SECOND)+".bmp";
            

            System.out.println(Nombre);
            File archivosalida= new File(Nombre);
            archivosalida.createNewFile();
            ImageIO.write(archivo, "bmp", archivosalida);   
            Esalidaarchivo.setText(Nombre);
            Elisto.setText(" Listo");
        } catch (IOException ex) {
            Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BcifrarActionPerformed

    private void LimpiarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarAActionPerformed
        CajaImagenA.setIcon(null);
        this.DireccionA=null;
        Elisto.setText("");
        this.valida--;
        LimpiarA.setEnabled(false);
        Bcifrar.setEnabled(false);
        Esalidaarchivo.setText("");
    }//GEN-LAST:event_LimpiarAActionPerformed

    private void LimpiarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarBActionPerformed
        CajaImagenB.setIcon(null);
        this.DireccionB=null;
        Elisto.setText("");
        this.validab--;
        LimpiarB.setEnabled(false);
    }//GEN-LAST:event_LimpiarBActionPerformed

    private void LimpiarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarCActionPerformed
        CajatextoA.setText("");
        Elisto.setText("");
        this.valida--;
        LimpiarC.setEnabled(false);
        Bcifrar.setEnabled(false);
        Esalidaarchivo.setText("");
    }//GEN-LAST:event_LimpiarCActionPerformed

    private void BcargarimagenBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcargarimagenBActionPerformed
        String documento="";
        JFileChooser archivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Solo archivos bmp","bmp");
        archivo.setFileFilter(filtro);
        
        int valida = archivo.showOpenDialog(this);
        if (valida == JFileChooser.APPROVE_OPTION) {
            this.DireccionB = archivo.getSelectedFile().toString();
            File file = new File(this.DireccionB);
            Image image;
            try {
                image = ImageIO.read(file);
                image=image.getScaledInstance(279, 186, Image.SCALE_SMOOTH);
                CajaImagenB.setIcon(new ImageIcon(image));
            } catch (IOException ex) {
                Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.validab++;
            if(this.validab==1){
                Bdescifrar.setEnabled(true);
            }
            LimpiarB.setEnabled(true);
        } 
    }//GEN-LAST:event_BcargarimagenBActionPerformed

    private void BdescifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BdescifrarActionPerformed
        try {
            InputStream entrada = new FileInputStream(this.DireccionB);
            ImageInputStream entradaimagen = ImageIO.createImageInputStream(entrada);
            BufferedImage archivo = ImageIO.read(entradaimagen);
            
            String respuesta="";
            int conta=0;
            int ven=1;
            boolean salida=true;
            String texto="";
            for (int i = 0; i <archivo.getHeight(); i++) {
                for (int j = 0; j < archivo.getWidth(); j++) {
                    int parametro = archivo.getRGB(j, i);
                    Color puntero = new Color(parametro);
                    if(salida){
                        String binario="";
                        char prueba;
                        switch(ven){
                            case 1:
                                prueba= (char)puntero.getRed();
                                binario+=Integer.toString(prueba,2);
                                binario=Relleno(binario);
                                respuesta+=binario.charAt(7);
                                ven++;
                                break;
                            case 2:
                                prueba= (char)puntero.getGreen();
                                binario+=Integer.toString(prueba,2);
                                binario=Relleno(binario);
                                respuesta+=binario.charAt(7);
                                ven++;
                                break;
                            default:
                                prueba= (char)puntero.getBlue();
                                binario+=Integer.toString(prueba,2);
                                binario=Relleno(binario);
                                respuesta+=binario.charAt(7);
                                ven=1; 
                        }
                        if(respuesta.length()%8==0){
                            if(binarioTexto(respuesta).contains("√ü")){
                                System.out.println("sip");
                                texto=binarioTexto(respuesta);
                                texto = texto.substring(0, texto.length()-1);
                                i=archivo.getHeight();
                                j=archivo.getWidth();
                                salida=false;
                            }
                        }
                        conta++; 
                    }
                }
            }
            System.out.println(texto);
            CajatextoB.setText(texto);
            Elisto1.setText(" Listo");
            this.guardab++;
            if(this.validab==1){
                Bguardar.setEnabled(true);
            }
            LimpiarD.setEnabled(true);
            Bguardar.setEnabled(true);

        } catch (IOException ex) {
            Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_BdescifrarActionPerformed

    private void LimpiarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarDActionPerformed
        CajatextoB.setText("");
        Elisto.setText("");
        this.guardab--;
        LimpiarD.setEnabled(false);
        Bguardar.setEnabled(false);
    }//GEN-LAST:event_LimpiarDActionPerformed

    private void BguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BguardarActionPerformed
        String tituloDocumento =JOptionPane.showInputDialog("Prop. El nombre del Archivo");
        XWPFDocument documento = new XWPFDocument();
        
        XWPFParagraph titulo_doc = documento.createParagraph();
        titulo_doc.setAlignment(ParagraphAlignment.CENTER);
        titulo_doc.setVerticalAlignment(TextAlignment.TOP);

        XWPFParagraph parrafo = documento.createParagraph();
        parrafo.setAlignment(ParagraphAlignment.BOTH);
        XWPFRun r1 = titulo_doc.createRun();
        r1.setBold(true);
        r1.setText(tituloDocumento);
        r1.setFontFamily("Arial");
        r1.setFontSize(14);
        r1.setTextPosition(10);
        r1.setUnderline(UnderlinePatterns.SINGLE);

        //Para el parrafo
        XWPFRun r2 = parrafo.createRun();
        r2.setText(CajatextoB.getText());
        r2.setFontSize(12);
        r2.addCarriageReturn();
        try {
        FileOutputStream word = new FileOutputStream(tituloDocumento+".docx");
        documento.write(word);
        word.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Digital_LSB.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_BguardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Digital_LSB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Digital_LSB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Digital_LSB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Digital_LSB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Digital_LSB().setVisible(true);
            }
        });
    }
    
    public static String Relleno(String temporal){
        String binario=temporal;
        boolean salida=true;
        while(salida){
            if (binario.length()<8){
                binario="0"+binario;
            }
            else{
                salida=false;   
            }    
        }
        return binario;
    }
    
    
    public static int Anexo(char Eprueba, char cajatarea){
        char prueba=Eprueba;
        StringBuffer arregla;
        String penultimo;
        int decimal;
        String binario=Integer.toString(prueba,2);
        arregla= new StringBuffer(binario);
        System.out.print(" original => "+arregla);
        arregla.setCharAt(arregla.length()-1, cajatarea);
        System.out.println(" + "+cajatarea+" = arreglado=> "+arregla+" ");
        penultimo=arregla.toString();
        decimal = Integer.parseInt(penultimo, 2);
        return decimal;
    }
    
    public static String textoBinario(String origen){
        String caja=origen;
        String temporal="";
        String binariototal="";
        boolean salida=true;
        for (int i = 0; i < caja.length(); i++) {
            char letra = caja.charAt(i);
            temporal=Integer.toString(letra,2);
            while(salida){
                if (temporal.length()<8){
                    temporal="0"+temporal;
                }
                else{
                    salida=false;   
                }    
            }
            salida=true;
            binariototal+=temporal;
        }
        return binariototal;
    }
    
        

    
    public static String binarioTexto(String bin){
        String binario = bin.trim().replaceAll(" ", "");
        String frase = "";

        for (int i = 0; i < binario.length(); i += 8) {
            String cadenaSeparada = binario.substring(i, i + 8);
            int decimal = Integer.parseInt(cadenaSeparada, 2);
            frase = frase + (char) decimal;
        }
        return frase;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BcargararchivoA;
    private javax.swing.JButton BcargarimagenA;
    private javax.swing.JButton BcargarimagenB;
    private javax.swing.JButton Bcifrar;
    private javax.swing.JButton Bdescifrar;
    private javax.swing.JButton Bguardar;
    private javax.swing.JLabel CajaImagenA;
    private javax.swing.JLabel CajaImagenB;
    private javax.swing.JTextArea CajatextoA;
    private javax.swing.JTextArea CajatextoB;
    private javax.swing.JLabel EarchivoA;
    private javax.swing.JLabel EimagenA;
    private javax.swing.JLabel EimagenB;
    private javax.swing.JLabel Elisto;
    private javax.swing.JLabel Elisto1;
    private javax.swing.JLabel Eresultado;
    private javax.swing.JLabel Esalidaarchivo;
    private javax.swing.JLabel LSB;
    private javax.swing.JButton LimpiarA;
    private javax.swing.JButton LimpiarB;
    private javax.swing.JButton LimpiarC;
    private javax.swing.JButton LimpiarD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
